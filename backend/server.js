// import express from 'express';
// import axios from 'axios';
// import dotenv from 'dotenv';
// import nodemailer from 'nodemailer';
// import cors from 'cors';

// dotenv.config();

// const app = express();

// // Enable CORS for all origins (can be customized for specific domains)
// app.use(cors());
// app.use(express.json());  // For parsing application/json

// // Setup the transporter for Nodemailer (for sending emails)
// const transporter = nodemailer.createTransport({
//   service: 'gmail',
//   auth: {
//     user: process.env.VITE_EMAIL_USER,  // Access email user from .env (Gmail email)
//     pass: process.env.VITE_EMAIL_PASS,  // Access email pass from .env (Gmail password or App password)
//   },
// });

// // API endpoint for generating email content using Groq API
// app.post('/generate-email-content', async (req, res) => {
//   const { prompt, data } = req.body;

//   if (!prompt || !data) {
//     return res.status(400).json({ error: 'Prompt and data are required' });
//   }

//   try {
//     // Use Groq API for email generation
//     const response = await axios.post('https://api.groq.com/generate', {
//       apiKey: process.env.VITE_GROQ_API_KEY,  // Use Groq API Key from .env
//       prompt: prompt,
//       data: data,
//     });

//     // Send back the generated content
//     return res.status(200).json({ generatedContent: response.data.content });
//   } catch (error) {
//     console.error('Error generating email content:', error);  // Log detailed error for debugging
//     return res.status(500).json({ error: 'Failed to generate email content' });
//   }
// });

// // API endpoint for sending email
// app.post('/send-email', async (req, res) => {
//   const { recipients, subject, content } = req.body;

//   if (!recipients || !subject || !content) {
//     return res.status(400).json({ error: 'Recipients, subject, and content are required' });
//   }

//   const mailOptions = {
//     from: process.env.VITE_EMAIL_USER,  // Sender email
//     to: recipients.join(','),          // Comma-separated email addresses
//     subject: subject,
//     text: content,  // The email body (content generated by Groq)
//   };

//   try {
//     const info = await transporter.sendMail(mailOptions);
//     console.log('Email sent successfully:', info);  // Log the result of email sending
//     return res.status(200).json({ message: 'Email sent successfully', info });
//   } catch (error) {
//     console.error('Error sending email:', error);  // Log detailed error for debugging
//     return res.status(500).json({ error: 'Failed to send email' });
//   }
// });

// // Start the server
// app.listen(5000, () => {
//   console.log('Server is running on http://localhost:5000');
// });
import express from 'express';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
import cors from 'cors';

dotenv.config();

const app = express();

// Enable CORS for all origins (can be customized for specific domains)
app.use(cors());

app.use(express.json());  // For parsing application/json

// Set up the mail transporter using Gmail's service
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.VITE_EMAIL_USER,  // Gmail address from .env file
    pass: process.env.VITE_EMAIL_PASS,  // Gmail password or App password from .env file
  },
});

app.post('/send-email', async (req, res) => {
  const { recipients, subject, template } = req.body;

  // Check if all fields are provided
  if (!recipients || !subject || !template) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  // Prepare the email options
  const mailOptions = {
    from: process.env.VITE_EMAIL_USER,  // Sender's email address
    to: recipients.join(','),  // Join the array of recipients as a comma-separated string
    subject: subject,  // Email subject
    text: template,  // Email body (template)
  };

  // Send the email
  try {
    const info = await transporter.sendMail(mailOptions);
    return res.status(200).json({ message: 'Email sent successfully!', info });
  } catch (error) {
    console.error('Error sending email:', error);
    return res.status(500).json({ error: 'Failed to send email: ' + error.message });
  }
});

app.listen(5000, () => {
  console.log('Server is running on http://localhost:5000');
});
